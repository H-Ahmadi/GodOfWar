// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UOM.Tests.Acceptance.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ConvertUnitOfMeasuresFeature : Xunit.IClassFixture<ConvertUnitOfMeasuresFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "ConvertUnitOfMeasures.feature"
#line hidden
        
        public ConvertUnitOfMeasuresFeature(ConvertUnitOfMeasuresFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "ConvertUnitOfMeasures", "\tIn order to work with different kind of unit of measures\r\n\tAs an uom administrat" +
                    "or\r\n\tI want to be able to convert unit of measures to each other", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line 7
 testRunner.Given("I have already defined a dimension called \'Length\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Convert scaled unit of measure to base unit of measure")]
        [Xunit.TraitAttribute("FeatureTitle", "ConvertUnitOfMeasures")]
        [Xunit.TraitAttribute("Description", "Convert scaled unit of measure to base unit of measure")]
        public virtual void ConvertScaledUnitOfMeasureToBaseUnitOfMeasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert scaled unit of measure to base unit of measure", null, ((string[])(null)));
#line 9
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "IsoCode",
                        "BaseUom",
                        "ConversionFactor"});
            table1.AddRow(new string[] {
                        "Centimeter",
                        "CM",
                        "M",
                        "0.01"});
#line 10
 testRunner.Given("I have already defined a scaled uom called \'Centimeter\' as following", ((string)(null)), table1, "Given ");
#line 13
 testRunner.When("I convert \'50\' \'CM\' to \'M\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 14
 testRunner.Then("The result should be \'0.5\' \'M\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Convert scaled unit of measure to scaled unit of measure")]
        [Xunit.TraitAttribute("FeatureTitle", "ConvertUnitOfMeasures")]
        [Xunit.TraitAttribute("Description", "Convert scaled unit of measure to scaled unit of measure")]
        public virtual void ConvertScaledUnitOfMeasureToScaledUnitOfMeasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert scaled unit of measure to scaled unit of measure", null, ((string[])(null)));
#line 16
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "IsoCode",
                        "BaseUom",
                        "ConversionFactor"});
            table2.AddRow(new string[] {
                        "Centimeter",
                        "CM",
                        "M",
                        "0.01"});
#line 17
 testRunner.Given("I have already defined a scaled uom called \'Centimeter\' as following", ((string)(null)), table2, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Title",
                        "IsoCode",
                        "BaseUom",
                        "ConversionFactor"});
            table3.AddRow(new string[] {
                        "Kilometer",
                        "KM",
                        "M",
                        "1000"});
#line 20
 testRunner.And("I have already defined a scaled uom called \'Kilometer\' as following", ((string)(null)), table3, "And ");
#line 23
 testRunner.When("I convert \'7\' \'KM\' to \'CM\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
 testRunner.Then("The result should be \'700000\' \'CM\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ConvertUnitOfMeasuresFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ConvertUnitOfMeasuresFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
